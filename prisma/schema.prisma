// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(cuid())
  email String @unique 
  userName String @unique
  clerkId String @unique
  name String?
  bio String?
  img String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations 
  post Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications") // notification recieved by user
  notificationsCreated Notification[]  @relation("notificationCreator")  // notification triggerd by user
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations 

  author User @relation(fields : [authorId],references : [id],onDelete: Cascade) // Cascade delete means delete all the post if author or user deleted
  comments Comment[] 
  like Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String 
  authorId String
  postId String
  createdAt DateTime @default(now())

  //Relations 

  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  notifications Notification[] 
  @@index([authorId,postId]) //composit index for faster querys
}

model Like{
  id String @id @default(cuid())
  postId String 
  userId String
  createdAt DateTime @default(now())

  //Relation

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields :[postId],references: [id],onDelete: Cascade)

  @@index([userId,postId])
  @@unique([userId,postId]) // one user one like for the post
}

model Follows {
  followerId String
  followingId String 
  createdAt DateTime @default(now())

  // Relations 
  follower User @relation("follower",fields :[followerId],references :[id],onDelete: Cascade)
  following User @relation("following",fields: [followingId],references: [id],onDelete: Cascade)
  @@index([followerId,followingId])
  @@id([followerId,followingId]) //one user follow 1 time one user
}


model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}